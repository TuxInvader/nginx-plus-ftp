user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log  notice;
pid        /var/run/nginx.pid;

load_module modules/ngx_http_js_module.so;
load_module modules/ngx_stream_js_module.so;

events {
    worker_connections  1024;
}

stream {

    # Setup the Key/Value Zone and timeout
    keyval_zone zone=ftp_ports:128k timeout=5m;

    # These two keyvals store the data_port from PASV using remote_ip:remote_port from ProxyProtocol
    # and the upstream endpoint in remote_ip:data_port. They then get
    # picked up in future data connections
    keyval "$proxy_protocol_addr:$proxy_protocol_port" $data_port zone=ftp_ports;
    keyval "$proxy_protocol_addr:$data_port" $upstream_socket zone=ftp_ports;

    # This stores the command using the data channel, allows logging transfers details
    keyval "$proxy_protocol_addr:$data_port:xfer" $xfer zone=ftp_ports;

    # This maps the data connection upstream for the current connection
    # AKA the future connection set up above
    keyval "$proxy_protocol_addr:$server_port" $data_server zone=ftp_ports;

    # This is the xfer command, picked up from above
    keyval "$proxy_protocol_addr:$server_port:xfer" $data_xfer zone=ftp_ports;

    # This stores the upstream for additional control connections from the same host
    keyval "$proxy_protocol_addr" $upstream_server zone=ftp_ports;

    # Map the data connection to the upstream if it exists, else send them
    # to the rejection server on 127.0.0.1:9999
    map $data_server $mapped_data {
      ~[0-9]+     $data_server;
      default     127.0.0.1:9999;
    }

    # If we have an $upstream_server set then ensure that additional 
    # control connections are persisted to the same server.
    map $upstream_server $mapped_server {
      ~[0-9]+     $upstream_server:$server_port;
      default     $mapped_control;
    }

    # Default upstream groups for non mapped servers
    map $server_port $mapped_control {
      21          vsftpd_21_backend;
      990         vsftpd_990_backend;
    }  

    js_include /etc/nginx/passive_ftp.js;

    log_format basic 'FTP: $server_addr $server_port $remote_addr [ $time_local ] '
                 '( $proxy_protocol_addr -> $upstream_server ) '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time';

    access_log  /var/log/nginx/access.log  basic;

    upstream vsftpd_990_backend {
        zone vsftpd_990 64k;
        server vsftpd:990 resolve;
    }

    # FTPS Service listening on port 990
    server {
        listen 990 ssl;
        ssl_certificate       /etc/nginx/server.crt;
        ssl_certificate_key   /etc/nginx/server.key;
        ssl_protocols         TLSv1.1 TLSv1.2;
        ssl_ciphers           HIGH:!aNULL:!MD5;
        ssl_session_cache     shared:SSL:20m;
        ssl_session_timeout   4h;
        ssl_handshake_timeout 30s;
        ssl_session_tickets on;
        ssl_session_ticket_key /etc/nginx/ticket.key;
        status_zone ftps_server;
        js_filter monitor_control_channel;
        proxy_ssl  on;
        proxy_ssl_session_reuse on;
        proxy_socket_keepalive on;
        proxy_timeout 5m;
        proxy_pass $mapped_server;
    }

    # Data connection ports for Passive FTP
    server {
        listen 10100-10299 ssl proxy_protocol;
        ssl_certificate       /etc/nginx/server.crt;
        ssl_certificate_key   /etc/nginx/server.key;
        ssl_protocols         TLSv1.1 TLSv1.2;
        ssl_ciphers           HIGH:!aNULL:!MD5;
        ssl_session_cache     shared:SSL:20m;
        ssl_session_timeout   4h;
        ssl_handshake_timeout 30s;
        ssl_session_tickets on;
        ssl_session_ticket_key /etc/nginx/ticket.key;
        status_zone ftps_server;
        proxy_ssl on;
        proxy_ssl_session_reuse on;
        proxy_socket_keepalive on;
        proxy_timeout 1m;
        proxy_pass $mapped_data;
    }

    # Service port for rejecting connections from unknown clients
    server {
        listen 9999;
        return "";
    }

}

